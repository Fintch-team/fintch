import 'dart:io';

final libDir = Directory('lib');

Future<void> main(List<String> args) async {
  final files = libDir.listSync(recursive: true);
  for (var item in files.where((element) => element is File)) {
    final file = item as File;
    if (file.parent.absolute.path == libDir.absolute.path) continue;

    final content = file.readAsStringSync();
    if (content.contains("export '")) {
      file.deleteSync();
    }
  }

  generateExport(
    libDir,
    fileName: 'gen_export',
    ext: '',
  );
}

final _templateHeader = """
// This file is automatically generated by tools.
// To update all exports inside project
// run :
// flutter pub run bin/gen_export
""";

bool generateExport(
  Directory directory, {
  String? fileName,
  String ext = '.exports',
  bool recursive = true,
}) {
  print('[GEN] Library: ${directory.path}');
  final items = directory.listSync();
  // error karena window menggunakan \\ kalo mac menggunakan /
  final String directoryName = fileName ??
      directory.absolute.path.substring(
        directory.absolute.path.lastIndexOf('\\') + 1,
      );
  print('directory name $directoryName');

  final File exportFile = File(
      '${directory.absolute.path}${Platform.pathSeparator}$directoryName$ext.dart');

  String exports = '';
  for (var item in items) {
    if (item is Directory && recursive) {
      final res = generateExport(item);
      if (!res) continue;

      final String subDirName = item.absolute.path.substring(
        item.absolute.path.lastIndexOf('\\') + 1,
      );

      exports += "export '$subDirName/$subDirName.exports.dart';\n";
      continue;
    }

    if (item is File &&
        item.path.toLowerCase().endsWith('.dart') &&
        !item.path.toLowerCase().endsWith('.g.dart') &&
        !item.path.toLowerCase().endsWith('generated_plugin_registrant.dart')) {
      if (item.absolute.path == exportFile.absolute.path) continue;

      fixImport(item);
      final path =
          item.absolute.path.substring(directory.absolute.path.length + 1);
      exports += "export '$path';\n";
      continue;
    }
  }

  if (exports.isNotEmpty) {
    final content =
        '${_templateHeader}library ${directoryName.toLowerCase()};\n\n$exports';

    exportFile.writeAsStringSync(content, flush: true);
    return true;
  }

  return false;
}

void fixImport(File file) {
  print('[GEN] Fix Imports: ${file.path}');
  final xcontent = file.readAsStringSync();
  if (xcontent.contains('package:fintch/gen_export.dart')) {
    return;
  }

  final lines = file.readAsLinesSync();
  String content = "";
  bool hasImport = false;

  for (final line in lines) {
    if (!line.trim().startsWith('//') && line.contains('package:fintch')) {
      hasImport = true;
    } else {
      content += line + '\n';
    }
  }

  if (hasImport) {
    content = "import 'package:fintch/gen_export.dart';\n$content";
  }

  file.writeAsStringSync(content, flush: true);
}
